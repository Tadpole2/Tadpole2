cd /etc/yum.repos.d/
mv CentOS-Base.repo CentOS-Base.repo.backup
wget http://mirrors.163.com/.help/CentOS6-Base-163.repo

# 清除yum机制的本地缓存的
yum clean all
# 将服务器上的软件包信息在本地缓存，以提高搜索安装软件的速度
yum makecache
# 更新所有的rpm包
yum update

# 安装rzsz
yum -y install lrzsz
yum -y install vim*
yum -y install lsof
yum -y install cpp binutils glibc glibc-kernheaders glibc-common glibc-devel gcc make gcc-c++ libstdc++-devel tcl
yum -y install pcre pcre-devel zlib zlib-devel openssl openssl—devel

yum -y install mlocate
updatedb

# 添加用户组
groupadd deploy
# 添加用户，并修改密码
mkdir -p /home/glanway
useradd glanway -r -g deploy -d /home/glanway
passwd glanway
chown glanway:deploy /home/glanway/ -R
# 添加用户，并修改密码
mkdir -p /home/deploy
useradd deploy -r -g deploy -d /home/deploy
passwd deploy
chown deploy:deploy /home/deploy/ -R

# 用户出现-bash-4.1#情况修改（用户目录下几个配置文件丢失）
cp /etc/skel/.bashrc /home/glanway
cp /etc/skel/.bash_profile /home/glanway
cp /etc/skel/.bashrc /home/deploy
cp /etc/skel/.bash_profile /home/deploy

########## 添加服务 ##########
# 添加服务
chkconfig --add mysql 
# 显示服务列表(3,4,5为on，如果不是执行 chkconfig --level 345 mysql on)
chkconfig --list

-- Java环境
	mkdir -p /usr/local/src/java
	cd /usr/local/src/java
	rz jdk-8u171-linux-x64.tar.gz
	tar -xvf jdk-8u171-linux-x64.tar.gz
	vim /etc/profile
		#Set java environment
		JAVA_HOME=/usr/local/src/java/jdk1.8.0_171
		CLASSPATH=.:$JAVA_HOME/lib.tools.jar
		PATH=$JAVA_HOME/bin:$PATH
		export JAVA_HOME CLASSPATH PATH
	source /etc/profile
	
-- MongoDB
	mkdir -p /usr/local/src/mongodb
	cd /usr/local/src/mongodb
	rz mongodb-linux-x86_64-3.6.3.tgz
	tar -xvf mongodb-linux-x86_64-3.6.3.tgz
	mv mongodb-linux-x86_64-3.6.3 mongodb-3.6.3
	vim /etc/profile
		#Set mongodb environment
		MONGODB_HOME=/usr/local/src/mongodb/mongodb-3.6.3
		PATH=$MONGODB_HOME/bin:$PATH
		export MONGODB_HOME PATH
	source /etc/profile
	cd mongodb-3.6.3
	mkdir conf
	mkdir logs
	mkdir data/db -p
	vim /conf/mongodb.conf
		# 端口
		port = 27017
		# 以守护程序的方式启用，即在后台运行
		fork = true
		# 绑定地址
		bind_ip = 118.31.52.248,127.0.0.1
		# 数据文件存放目录 
		dbpath = /usr/local/src/mongodb/mongodb-3.6.3/data/db
		# 日志文件存放目录
		logpath = /usr/local/src/mongodb/mongodb-3.6.3/logs/mongodb.log
		# 追加日志
		logappend = true
	# 停止
	mongod -shutdown -dbpath=/usr/local/src/mongodb/mongodb-3.6.3/data/db/
	# 启动
	mongod -config /usr/local/src/mongodb/mongodb-3.6.3/conf/mongodb.conf
	# 启动
	mongod -f /usr/local/src/mongodb/mongodb-3.6.3/conf/mongodb.conf
	# 进入数据库
	mongo 
	# 自启动，当前目录下mongodb.sh文件 --> /etc/init.d/mongodb，参考mysql自启动
	
-- Redis
	mkdir -p /usr/local/src/redis
	cd /usr/local/src/redis
	rz redis-3.0.0.tar.gz
	tar -xvf redis-3.0.0.tar.gz
	cd redis-3.0.0
	make
	make test #这个就不要执行了，需要很长时间
	make install
	cp redis.conf /etc/
	vi /etc/redis.conf
		# 守护进程修改如下，默认为no
		daemonize yes
		# 修改默认绑定ip，默认为127.0.0.1
		bind 127.0.0.1
		# 修改rdb文件存储位置（可以不修改），默认为dir ./
		dir /usr/local/src/redis/
		# 修改用户密码，默认为无
		requirepass 密码
		# 修改数据库初始化大小，默认为无
		maxmemory 200mb
	# 启动
	redis-server /etc/redis.conf
	# 测试
	redis-cli

-- Nginx
	mkdir -p /usr/local/src/nginx
	cd /usr/local/src/nginx
	rz nginx-1.7.7.tar.gz
	tar -xvf nginx-1.7.7.tar.gz
	cd nginx-1.7.7
	./configure --prefix=/usr/local/src/nginx --with-http_slice_module --with-http_stub_status_module --with-http_ssl_module --user=root --group=root
	make  
	make install
	# 运行
	./nginx
	# 停止
	./nginx -s stop 
	# 重新加载
	./nginx -s reload
	# 自启动，当前目录下nginx.sh文件 --> /etc/init.d/nginx，参考mysql自启动
	
	卸载, 删除目录即可
	
// BUG
1、 ./configure: error: the HTTP rewrite module requires the PCRE library.
You can either disable the module by using --without-http_rewrite_module
option, or install the PCRE library into the system, or build the PCRE library
statically from the source with nginx by using --with-pcre=<path> option.
解决方案
	yum -y install pcre-devel
2、./configure: error: the HTTP gzip module requires the zlib library.
You can either disable the module by using --without-http_gzip_module
option, or install the zlib library into the system, or build the zlib library
statically from the source with nginx by using --with-zlib=<path> option.
解决方案
	yum install -y zlib-devel
3、./configure: error: SSL modules require the OpenSSL library.
You can either do not enable the modules, or install the OpenSSL library
into the system, or build the OpenSSL library statically from the source
with nginx by using --with-openssl=<path> option.
解决方案
	yum -y install openssl openssl-devel
	
-- Mysql
	# 添加用户组和用户，并修改密码
	groupadd mysql
	mkdir -p /home/mysql
	useradd mysql -r -g mysql -d /home/mysql
	passwd mysql
	chown mysql:mysql /home/mysql/ -R
	# 安装mysql
	mkdir -p /usr/local/mysql
	cd /usr/local/mysql
	rz mysql-5.6.27-linux-glibc2.5-x86_64.tar.gz
	tar -xvf mysql-5.6.27-linux-glibc2.5-x86_64.tar.gz
	mv mysql-5.6.27-linux-glibc2.5-x86_64/* .
	rm -rf mysql-5.6.27-linux-glibc2.5-x86_64
	mkdir tmp
　　mkdir logs
	mkdir -p run/mysqld
	cp support-files/my-default.cnf /etc/my.cnf
	> /etc/my.cnf
	vim /etc/my.cnf
		[client]
			default-character-set=utf8
			socket=/usr/local/mysql/tmp/mysql.sock
			
		[mysql]
			default-character-set=utf8
			
		[mysqld]
			socket=/usr/local/mysql/tmp/mysql.sock
			tmpdir=/usr/local/mysql/tmp/
			basedir=/usr/local/mysql
			datadir=/usr/local/mysql/data
			symbolic-links=0
			character_set_server=utf8
			bind-address=0.0.0.0
			max_connections=1000
			
		[mysqld_safe]
			default-character-set=utf8
			log-error=/usr/local/mysql/logs/mysqld.log
			pid-file=/usr/local/mysql/run/mysqld/mysqld.pid
	chown -R mysql:mysql ./
	./scripts/mysql_install_db --user=mysql --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data/

// BUG
FATAL ERROR: please install the following Perl modules before executing ./scripts/mysql_install_db:Data::Dumper
解决方案
	安装autoconf库, yum -y install autoconf
	
	cp support-files/mysql.server /etc/init.d/mysql
	# 添加服务
	chkconfig --add mysql 
	# 显示服务列表(3,4,5为on，如果不是执行 chkconfig --level 345 mysql on)
	chkconfig --list
	service mysql start
	# 修改root用户密码
	./mysql -h127.0.0.1  -uroot 
	Grant all privileges on *.* to '用户'@'IP' identified by '密码' with grant option;
	Grant all privileges on 表名.* to '用户'@'IP' identified by '密码';
	flush privileges;
	# 环境变量
	vim /etc/profile
		#Set mysql environment
		MYSQL_HOME=/usr/local/mysql
		PATH=$MYSQL_HOME/bin:$PATH
		export MYSQL_HOME PATH
	source /etc/profile

-- 安装OpenOffice
	rz Apache_OpenOffice_4.1.5_Linux_x86-64_install-rpm_zh-CN.tar.gz
	tar -xvf Apache_OpenOffice_4.1.5_Linux_x86-64_install-rpm_zh-CN.tar.gz
	cd zh-CN/RPMS 
	rpm -ivh *.rpm
	cd desktop-integration
	rpm -ivh  openoffice4.1.5-redhat-menus-4.1.5-9789.noarch.rpm
	# 启动
	cd /opt/openoffice4/program
	soffice -headless -accept="socket,host=127.0.0.1,port=8100;urp;"  -nofirststartwizard &
	
// BUG
1、/opt/openoffice4/program/soffice.bin: error while loading shared libraries: libXext.so.6: cannot open shared object file: No such file or directory
找不到libXext.so.6文件,去系统里面的/usr/lib64 或者 /usr/lib 查看有没有这个文件,如果有就copy到/opt/openoffice4/program/目录里面,
赋予chmod 777 libXext.so.6 。如果没有那么要安装该包。
由于我的系统是64位,那么输入yum install libXext.x86_64, 如果是32位系统输入:yum install libXext.i686  安装完成后去那两个目录找libXext.so.6复制到/opt/openoffice4/program/目录里面, 赋予chmod 777 libXext.so.6 
2、/opt/openoffice4/program/soffice.bin: error while loading shared libraries: libfreetype.so.6: cannot open shared object file: No such file or directory
找不到libfreetype.so.6文件,同上输入:yum install libfreetype.i686
安装完之后去那两个目录找libXext.so.6复制到/opt/openoffice4/program/目录里面, 赋予权限。
3、报问题:no suitable windowing system found, exiting.
输入安装:yum groupinstall "X Window System" ,一路安装完之后重启系统,在启动openoffice服务看看。

-- 安装Ffmpeg
	# 需要先安装yasm/nasm包,也可以使用--disable-yasm禁用这个选项编译(不建议)
	mkdir -p /usr/local/src/ffmpeg/yasm
	cd /usr/local/src/ffmpeg/yasm
	rz yasm-1.3.0.tar.gz
	tar -xvf yasm-1.3.0.tar.gz
	cd yasm-1.3.0
	./configure --prefix=/usr/local/src/ffmpeg/yasm
	make
	make install
	vim /etc/profile
		#Set yasm environment
		YASM_HOME=/usr/local/src/ffmpeg/yasm
		PATH=$YASM_HOME/bin:$PATH
		export YASM_HOME PATH
	source /etc/profile
	
	#安装ffmpeg
	mkdir -p /usr/local/src/ffmpeg
	cd /usr/local/src/ffmpeg
	rz ffmpeg-4.0.2.tar.bz2
	tar -xvf ffmpeg-4.0.2.tar.bz2
	cd ffmpeg-4.0.2
	./configure --prefix=/usr/local/src/ffmpeg --enable-shared
	make # 编译非常久
	make install
	# 查看是否安装成功
	cd /usr/local/src/ffmpeg/bin
	./ffmpeg -version 
	vim /etc/profile
		#Set ffmpeg environment
		FFMPEG_HOME=/usr/local/src/ffmpeg
		PATH=$FFMPEG_HOME/bin:$PATH
		export FFMPEG_HOME PATH
	source /etc/profile

// BUG
./ffmpeg: error while loading shared libraries: libavdevice.so.58: cannot open shared object file: No such file or directory
原因是lib目录未加载到链接到系统库中，系统ld目录列表在/etc/ld.so.conf中
打开文件会发现，里面引用了/etc/ld.so.conf.d/下面所有的.conf文件
解决方案: 
	vim /etc/ld.so.conf.d/ffmpeg.conf
		/usr/local/src/ffmpeg/lib
	ldconfig # 使配置生效
	
-- 安装MEncoder
	# 安装解码器
	mkdir -p /usr/local/src/mplayer/codecs
	cd /usr/local/src/mplayer/codecs
	rz all-20110131.tar.bz2
	tar -xvf all-20110131.tar.bz2
	mv all-20110131/* .
	rm -rf all-20110131
	
	# 安装MEncoder
	cd /usr/local/src/mplayer
	rz MPlayer-1.3.0.tar.xz
	tar -xvf MPlayer-1.3.0.tar.xz
	cd MPlayer-1.3.0
	./configure --prefix=/usr/local/src/mplayer --codecsdir=/usr/local/src/mplayer/codecs
	make # 编译非常久
	make install
	# 查看是否安装成功
	cd /usr/local/src/mplayer/bin
	./mplayer -v
	vim /etc/profile
		#Set mplayer environment
		MPLAYER_HOME=/usr/local/src/mplayer
		PATH=$MPLAYER_HOME/bin:$PATH
		export MPLAYER_HOME PATH
	source /etc/profile
	
-- 安装Docker
	# 云安装
	yum -y install docker
	# 启动
	systemctl start docker
	
	
jstack -l pid > jstack.log
jmap -dump:format=b,file=dump.hprof pid
jmap -dump:format=b,file=gaedump.hprof 7306
执行命令把pid替换


sh zookeeper-server-start.sh start
sh kafka-server-start.sh ../config/server.properties &
	